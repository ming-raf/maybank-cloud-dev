name: terraform-deploy

on:
  workflow_call:
    inputs:
      accountId:
        required: false
        type: string
      environmentName:
        required: true
        type: string
      projectName:
        required: false
        type: string
        default: ${{ github.event.repository.name }}
      deployDirectory:
        required: false
        type: string
        default: "deploy/"
      region:
        required: false
        type: string
        default: "ap-southeast-1"
      version:
        required: false
        type: string
        default: ${{ github.sha }}
      destroyTerraform:
        description: "Only do terraform destroy"
        type: boolean
        default: false
        required: false
      build-args:
        description: "List of build-time variables"
        type: string
        required: false

jobs:
  terraform-deploy:
    name: Deploy Terraform to ${{ inputs.environmentName }}
    runs-on: ubuntu-24.04
    defaults:
      run:
        working-directory: ${{ inputs.deployDirectory }}
    env:
      PROJECT_NAME: ${{ inputs.projectName }}
      ENVIRONMENT_NAME: ${{ inputs.environmentName }}
      AWS_REGION: ${{ inputs.region }}
      VERSION: ${{ inputs.version }}
      SHA: ${{ github.sha }}
      ACCOUNT_ID: ${{ inputs.accountId }}
      CORE_STATE_BUCKET: "terraform-rafiqi-personal"
      CORE_STATE_REGION: "ap-southeast-1"
    environment: ${{ inputs.environmentName }}
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
    - name: run-list
      run: |
        ls -lahR
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        audience: sts.amazonaws.com
        aws-region: ${{ inputs.region }}
        role-to-assume: arn:aws:iam::${{ inputs.accountId }}:role/GithubOIDC
    - name: Setup OpenTofu
      uses: opentofu/setup-opentofu@592200bd4b9bbf4772ace78f887668b1aee8f716 # v1.0.5
      with:
        tofu_version: latest
    - id: set-env
      run: |
        echo "${{ inputs.build-args }}" > build_args.txt
        while IFS= read -r line
        do
          echo "$line" >> $GITHUB_ENV
        done < build_args.txt
    - name: Convert Environment Variables to TF_VAR format
      run: |
        echo "Converting environment variables to TF_VAR format..."
        env | while read -r line; do
          if [[ $line =~ ^([^=]+)=(.*) ]]; then
            VAR_NAME="${BASH_REMATCH[1]}"
            VAR_VALUE="${BASH_REMATCH[2]}"
            
            # Skip if variable already starts with TF_VAR or is a system/GitHub variable
            if [[ $VAR_NAME != TF_VAR_* && 
                  $VAR_NAME != GITHUB_* && 
                  $VAR_NAME != RUNNER_* && 
                  $VAR_NAME != HOME && 
                  $VAR_NAME != PATH && 
                  $VAR_NAME != SHELL && 
                  $VAR_NAME != PWD && 
                  $VAR_NAME != OLDPWD && 
                  $VAR_NAME != SHLVL && 
                  $VAR_NAME != _* ]]; then
              
              TF_VAR_NAME="TF_VAR_$VAR_NAME"
              echo "$TF_VAR_NAME=$VAR_VALUE" >> $GITHUB_ENV
              echo "Created: $TF_VAR_NAME from $VAR_NAME"
            fi
          fi
        done
    - name: Check for existing backend config
      working-directory: ${{ inputs.deployDirectory }}
      id: check-backend
      run: |
        if grep -r "backend\s*\"" --include="*.tf" .; then
          echo "Backend configuration already exists"
          echo "backend_exists=true" >> $GITHUB_OUTPUT
        else
          echo "No backend configuration found"
          echo "backend_exists=false" >> $GITHUB_OUTPUT
        fi
    - name: Create backend.tf file
      working-directory: ${{ inputs.deployDirectory }}
      if: steps.check-backend.outputs.backend_exists == 'false'
      run: |        
        cat << EOF > backend.tf
        terraform {
          backend "s3" {
            bucket = "${{ env.CORE_STATE_BUCKET }}"
            key    = "${{ inputs.environmentName }}/.terraform/${{ inputs.projectName }}.tfstate"
            region = "${{ env.CORE_STATE_REGION }}"
            use_lockfile = true
          }
        }
        EOF
    - name: run-terraform
      if: ${{ inputs.destroyTerraform == false }}
      run: |
        tofu init -input=false
        tofu apply -input=false -auto-approve
      env:
        TF_VAR_AWS_ACCOUNT_ID: ${{ inputs.accountId || env.ACCOUNT_ID }}
        TF_VAR_ENVIRONMENT_NAME: ${{ env.ENVIRONMENT_NAME }}
        TF_VAR_ARGOCD_GH_PAT: ${{ secrets.ARGOCD_GH_PAT }}
    - name: destroy-terraform
      if: ${{ inputs.destroyTerraform }}
      run: |
        tofu init -input=false
        tofu destroy -input=false -auto-approve
      env:
        TF_VAR_AWS_ACCOUNT_ID: ${{ inputs.accountId || env.ACCOUNT_ID }}
        TF_VAR_ENVIRONMENT_NAME: ${{ env.ENVIRONMENT_NAME }}
        TF_VAR_ARGOCD_GH_PAT: ${{ secrets.ARGOCD_GH_PAT }}